version: '3.8'

services:
  # PostgreSQL database for MLflow backend
  mlflow-db:
    image: postgres:13
    container_name: mlflow-postgres
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow123
    volumes:
      - mlflow_db_data:/var/lib/postgresql/data
    networks:
      - mlflow-network
    restart: unless-stopped

  # MinIO for artifact storage
  minio:
    image: minio/minio:latest
    container_name: mlflow-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - mlflow-network
    restart: unless-stopped

  # Create MinIO bucket
  minio-create-bucket:
    image: minio/mc:latest
    container_name: minio-create-bucket
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb myminio/mlflow || true;
      /usr/bin/mc policy set public myminio/mlflow;
      exit 0;
      "
    networks:
      - mlflow-network

  # MLflow tracking server
  mlflow-server:
    image: python:3.12-slim
    container_name: mlflow-server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow123@mlflow-db:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow/
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      - mlflow-db
      - minio
      - minio-create-bucket
    volumes:
      - ./mlflow:/app
    working_dir: /app
    command: >
      bash -c "
      pip install mlflow psycopg2-binary boto3 &&
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow123@mlflow-db:5432/mlflow
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
      --port 5000
      "
    networks:
      - mlflow-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - mlflow-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mlflow-network
    restart: unless-stopped

  # ML API service
  ml-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ml-inference-api
    ports:
      - "5001:5000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
      - PORT=5000
    depends_on:
      - mlflow-server
    volumes:
      - ./models:/app/models
    networks:
      - mlflow-network
    restart: unless-stopped

volumes:
  mlflow_db_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  mlflow-network:
    driver: bridge